{
  "_from": "jssoup",
  "_id": "jssoup@0.0.11",
  "_inBundle": false,
  "_integrity": "sha512-nBIZHOgvfFGyRX9vATXDTPpeytJPJ7fbPRSChcu6uVNsPYAyz2RCdPoYaR3dRXiSWndr/VTPCVHKPsAt3A/jBA==",
  "_location": "/jssoup",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "escapedName": "jssoup",
    "fetchSpec": "latest",
    "name": "jssoup",
    "raw": "jssoup",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jssoup/-/jssoup-0.0.11.tgz",
  "_shasum": "9b8209a6511944e1c3dc051654884110ea579f7a",
  "_spec": "jssoup",
  "_where": "C:\\Users\\elyth\\bot-discord",
  "author": {
    "email": "chishui2@gmail.com",
    "name": "Liyun Xiu"
  },
  "bugs": {
    "url": "https://github.com/chishui/JSSoup/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^2.6.9",
    "growl": "^1.10.5",
    "htmlparser": "^1.7.7",
    "lodash": "^4.17.15"
  },
  "deprecated": false,
  "description": "JSSoup is a BeautifulSoup style HTML parser library.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.3",
    "babel-preset-es2015": "^6.24.1",
    "mocha": "^5.2.0"
  },
  "files": [
    "README.md",
    "dist"
  ],
  "homepage": "https://github.com/chishui/JSSoup#readme",
  "keywords": [
    "beautifulsoup",
    "html",
    "nodejs",
    "parser",
    "react-native"
  ],
  "license": "MIT",
  "main": "./dist/lib/jssoup.js",
  "name": "jssoup",
  "optionalDependencies": {},
  "readme": "JSSoup\n=============================\nI'm a fan of Python library BeautifulSoup. It's feature-rich and very easy to use. But when I am working on a small react-native project, and I tried to find a HTML parser library \nlike BeautifulSoup, I failed.  \nSo I want to write a HTML parser library which can be so easy to use just like BeautifulSoup in Javascript.  \n**JSSoup** uses [tautologistics/node-htmlparser](https://github.com/tautologistics/node-htmlparser) as HTML dom parser, \nand creates a series of BeautifulSoup like API on top of it.  \nJSSoup supports both **node** and **react-native**.  \n\n[![Build Status](https://travis-ci.org/chishui/JSSoup.svg?branch=master)](https://travis-ci.org/chishui/JSSoup)\n[![npm version](https://badge.fury.io/js/jssoup.svg)](https://badge.fury.io/js/jssoup)\n[![NPM](https://img.shields.io/npm/dm/jssoup.svg)](https://www.npmjs.com/package/jssoup)\n\n\n# Naming Style\nJSSoup tries to use the same interfaces as BeautifulSoup so BeautifulSoup user can use JSSoup seamlessly. \nHowever, JSSoup uses Javascript's camelCase naming style instead of Python's underscore naming style.\nSuch as `find_all()` in BeautifulSoup is replaced as `findAll()`.\n\n# Install\n```\n$ npm install jssoup \n```\n\n# How to use JSSoup\n### Import\n```javascript\n//react-native\nimport JSSoup from 'jssoup'; \n// nodejs\nvar JSSoup = require('jssoup').default;\n```\n### Make Soup\n```javascript\nvar soup = new JSSoup('<html><head>hello</head></html>');\n```\n> The text element only contains whitespace will be ignored by default. To disable this feature, set second parameter \nof JSSoup to false. This parameter is \"ignoreWhitespace\" and will be passed into htmlparser.\n```javascript\nvar soup = new JSSoup('<html><head>hello</head></html>', false);\n```\n\n### Name\n```javascript\nvar soup = new JSSoup('<html><head>hello</head></html>');\nvar tag = soup.find('head');\ntag.name\n// 'head'\ntag.name = 'span'\nconsole.log(tag)\n//<span>hello</span>\n```\n### Attributes\n```javascript\nvar soup = new JSSoup('<tag id=\"hi\" class=\"banner\">hello</tag>');\nvar tag = soup.nextElement;\ntag.attrs\n// {id: 'hi', class: 'banner'} \ntag.attrs.id = 'test';\nconsole.log(tag)\n// <tag id=\"test\" class=\"banner\">hello</tag>\n```\n\n### Navigation\n#### .previousElement, .nextElement\n```javascript\nvar data = `\n<div>\n  <a>1</a>\n  <b>2</b>\n  <c>3</c>\n</div>\n`\nvar soup = new JSSoup(data);\nvar div = soup.nextElement;\nvar b = div.nextElement.nextElement;\n// b.string: '2'\nvar a = b.previousElement;\n// a.string: '1'\n```\n#### .previousSibling, .nextSibling\n```javascript\nvar soup = new JSSoup(data);\nvar div = soup.nextElement;\nvar a = div.nextElement;\nvar b = a.nextSibling;\nvar c = b.nextSibling;\nc.nextSibling == undefined;\n```\n#### .contents\n```javascript\ndiv.contents\n// [<a>1</a>, <b>2</b>, <c>3</c>]\n```\n#### .descendants\n```javascript\ndiv.descendants\n// [<a>1</a>, 1, <b>2</b>, 2, <c>3</c>, 3]\n```\n#### .parent\n```javascript\ndiv.parent == soup\n```\n### Edit\n#### .extract()\n```javascript\nb.extract();\ndiv.contents\n// [<a>1</a>, <c>3</c>]\n```\n#### .append()\n```javascript\nb.extract();\ndiv.append(b)\ndiv.contents\n// [<a>1</a>, <c>3</c>, <b>2</b>]\n```\n### Search\n#### .findAll()\n```javascript\nvar data = `\n<div>\n  <div class=\"h1\"></div>\n  <a>hello</a>\n</div>\n`\nvar soup = new JSSoup(data);\nsoup.findAll('a')\n// [<a>hello</a>]\nsoup.findAll('div', 'h1')\n// [<div class=\"h1\"></div>]\n```\n#### .find()\n```javascript\nvar data = `\n<div>\n  <p> hello </p>\n  <p> world </p>\n</div>\n`\nvar soup = new JSSoup(data);\nsoup.find('p')\n// <p> hello </p>\n```\n#### .findNextSibling()\n```javascript\nvar data = `\n<div>\n  <span> test </span>\n  <div> div </div>\n  <p> hello </p>\n  <p> world </p>\n</div>\n`\nvar soup = new JSSoup(data);\nvar span = soup.find('span');\nspan.findNextSibling('p')\n// <p> hello </p>\n```\n#### .findNextSiblings()\n```javascript\nvar data = `\n<div>\n  <span> test </span>\n  <div> div </div>\n  <p> hello </p>\n  <p> world </p>\n</div>\n`\nvar soup = new JSSoup(data);\nvar span = soup.find('span');\nspan.findNextSiblings('p')\n// <p> hello </p>\n// <p> world </p>\n```\n#### .findPreviousSibling()\n```javascript\nvar data = `\n<div>\n  <p> hello </p>\n  <p> world </p>\n  <div> div </div>\n  <span> test </span>\n</div>\n`\nvar soup = new JSSoup(data);\nvar span = soup.find('span');\nspan.findPreviousSibling('p')\n// <p> world </p>\n```\n#### .findPreviousSiblings()\n```javascript\nvar data = `\n<div>\n  <p> hello </p>\n  <p> world </p>\n  <div> div </div>\n  <span> test </span>\n</div>\n`\nvar soup = new JSSoup(data);\nvar span = soup.find('span');\nspan.findPreviousSiblings('p')\n// <p> hello </p>\n// <p> world </p>\n```\n### Output\n#### .prettify()\n```javascript\nvar soup = new JSSoup('<html><head>hello</head></html>');\nsoup.prettify()\n// <html>\n//  <head>\n//   hello\n//  </head>\n// </html>\n```\n#### .getText(), .text\n```javascript\ndiv.text\n// '123'\ndiv.getText('|')\n// '1|2|3'\n```\n#### .string\n```javascript\nb.string == '2';\nvar soup = new JSSoup('<html><head>hello</head></html>');\nsoup.string == 'hello';\n```\n\n# Run Test\n```\nnpm test\n```\n# Status\nThere's a lot of work need to be done.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chishui/JSSoup.git"
  },
  "scripts": {
    "build": "babel ./lib/*.js -d dist --presets es2015 ",
    "clean": "rm -rf dist",
    "init": "mkdir dist && mkdir dist/lib",
    "prebuild": "npm run clean && npm run init",
    "test": "mocha --compilers js:babel-core/register"
  },
  "version": "0.0.11"
}
